nPlots <- ncol(this.cluster) / 2
for(j in 1:nPlots)
{
index <- j * 2
cat(index)
col <- colors()[convertMembershipToColor(this.cluster[,index-1], this.cluster[,index])]
plotName <- paste(names(data)[i], "_",colnames(this.cluster)[index-1], sep="")
open3d(zoom=1)
par3d(windowRect=c(61,52,1085,1076))
plot3d(pc$x[,1:3], col=col)
M <- par3d("userMatrix")
movie3d(spin3d(axis=c(1,0,1)), duration=10, dir="/home/jrudd", clean=TRUE, fps=20, movie=plotName)
}
}
}
kmeans.Plot3d(expressionData, clusterData)
rownames(clusterData[[2]])
clusterData[[2]]
View(Yoshihara.clusters)
Yoshihara.clusters <- read.table("/home/jrudd/Documents/ovca-expression/Data/YoshiharaSilhouettesClusterMemb.csv", sep=",", header=T, row.names=1)
View(Yoshihara.clusters)
TCGA.pc <- prcomp(t(TCGA))
plot3d(TCGA.pc$x[,1:3], )
rgl.close()
TCGA.clusters <- read.table("/home/jrudd/Documents/ovca-expression/Data/TCGASilhouettesClusterMemb.csv", sep=",", header=T, row.names=1)
rownames(TCGA.clusters) <- TCGA.clusters[,1]
TCGA.clusters <- TCGA.clusters[,-1]
Yoshihara.clusters <- read.table("/home/jrudd/Documents/ovca-expression/Data/YoshiharaSilhouettesClusterMemb.csv", sep=",", header=T, row.names=1)
rownames(Yoshihara.clusters) <- Yoshihara.clusters[,1]
Yoshihara.clusters <- Yoshihara.clusters[,-1]
Tothill.clusters <- read.table("/home/jrudd/Documents/ovca-expression/Data/TothillSilhouettesClusterMemb.csv", sep=",", header=T, row.names=1)
rownames(Tothill.clusters) <- Tothill.clusters[,1]
Tothill.clusters <- Tothill.clusters[,-1]
expressionData <- list(TCGA=TCGA, Yoshihara=Yoshihara, Tothill=Tothill)
clusterData <- list(TCGA=TCGA.clusters, Yoshihara=Yoshihara.clusters, Tothill=Tothill.clusters)
kmeans.Plot3d <- function(data, clusters)
{
for(i in 1:length(data))
{
this.cluster <- clusters[[i]]
this.data <- data[[i]][,rownames(this.cluster)]
pc <- prcomp(t(this.data))
this.cluster <- this.cluster[rownames(pc$x),]
nPlots <- ncol(this.cluster) / 2
for(j in 1:nPlots)
{
index <- j * 2
col <- colors()[convertMembershipToColor(this.cluster[,index-1], this.cluster[,index])]
plotName <- paste(names(data)[i], "_",colnames(this.cluster)[index-1], sep="")
open3d(zoom=1)
par3d(windowRect=c(61,52,1085,1076))
plot3d(pc$x[,1:3], col=col)
M <- par3d("userMatrix")
movie3d(spin3d(axis=c(1,0,1)), duration=10, dir="/home/jrudd", clean=TRUE, fps=20, movie=plotName)
rgl.close()
}
}
}
kmeans.Plot3d(expressionData, clusterData)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#LIBRARIES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(ggplot2)
library(gplots)
library(curatedOvarianData)
library(rgl)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#FUNCTIONS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
convertMembershipToColor <- function(membership, silhouette)
{
colors <- c(552, 257, 26, 457)
result <- lapply(membership, function(x){
return(colors[x])
})
result[silhouette < 0] <- 153
return(unlist(result))
}
kmeans.Plot3d <- function(data, clusters)
{
for(i in 1:length(data))
{
this.cluster <- clusters[[i]]
this.data <- data[[i]][,rownames(this.cluster)]
pc <- prcomp(t(this.data))
this.cluster <- this.cluster[rownames(pc$x),]
nPlots <- ncol(this.cluster) / 2
for(j in 1:nPlots)
{
index <- j * 2
col <- colors()[convertMembershipToColor(this.cluster[,index-1], this.cluster[,index])]
plotName <- paste(names(data)[i], "_",colnames(this.cluster)[index-1], sep="")
open3d(zoom=1)
par3d(windowRect=c(61,52,1085,1076))
plot3d(pc$x[,1:3], col=col, size=7)
M <- par3d("userMatrix")
movie3d(spin3d(axis=c(1,0,1), rpm=1), duration=20, dir="/home/jrudd", clean=TRUE, fps=20, movie=plotName)
rgl.close()
}
}
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#LOAD DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Load Tothill Data
data(GSE9891_eset)
#Load TCGA Data
data(TCGA_eset)
#Load Yoshihara Data
data(GSE32062.GPL6480_eset)
#Extract Expression Information
Tothill <- exprs(GSE9891_eset)
TCGA <- exprs(TCGA_eset)
Yoshihara <- exprs(GSE32062.GPL6480_eset)
rm(GSE9891_eset, TCGA_eset, GSE32062.GPL6480_eset)
gc()
#Load Cluster Info
TCGA.clusters <- read.table("/home/jrudd/Documents/ovca-expression/Data/TCGASilhouettesClusterMemb.csv", sep=",", header=T, row.names=1)
rownames(TCGA.clusters) <- TCGA.clusters[,1]
TCGA.clusters <- TCGA.clusters[,-1]
Yoshihara.clusters <- read.table("/home/jrudd/Documents/ovca-expression/Data/YoshiharaSilhouettesClusterMemb.csv", sep=",", header=T, row.names=1)
rownames(Yoshihara.clusters) <- Yoshihara.clusters[,1]
Yoshihara.clusters <- Yoshihara.clusters[,-1]
Tothill.clusters <- read.table("/home/jrudd/Documents/ovca-expression/Data/TothillSilhouettesClusterMemb.csv", sep=",", header=T, row.names=1)
rownames(Tothill.clusters) <- Tothill.clusters[,1]
Tothill.clusters <- Tothill.clusters[,-1]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#ANALYSIS OF THE GENE EXPRESSION DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
expressionData <- list(TCGA=TCGA, Yoshihara=Yoshihara, Tothill=Tothill)
clusterData <- list(TCGA=TCGA.clusters, Yoshihara=Yoshihara.clusters, Tothill=Tothill.clusters)
kmeans.Plot3d(expressionData, clusterData)
library(reshape)
library(ggplot2)
MAD <- function(x)
{
thisMedian <- median(x, na.rm=TRUE)
result <- median(abs(x - thisMedian), na.rm=TRUE)
return(result)
}
files <- list.files(path="~/Documents/tmp/evolutionary-gene-set-selection/Imputation/Data", pattern="*TCGA.*0.6.imputation.results.txt", full.names=T, recursive=FALSE)
results <- lapply(files, function(x) {
tmp <- read.table(x)
fname <- tail(unlist(strsplit(x, split="/")), n=1)
metaData <- unlist(strsplit(fname, split="\\."))
if(length(metaData) == 8)
{
redundancy <- metaData[2]
nGenes <- metaData[3]
corrThresh <- metaData[5]
}
if(length(metaData) == 9)
{
redundancy <- metaData[3]
nGenes <- metaData[4]
corrThresh <- metaData[6]
}
tmp$Redundancy <- redundancy
tmp$NumberMeasuredGenes <- nGenes
tmp$CorrelationThreshold <- paste("0.",corrThresh,sep="")
return(tmp)
})
results.combined <- do.call(rbind, results)
results.simple <- melt(results.combined[,c("TCGA.Spearman", "Redundancy", "CorrelationThreshold", "NumberMeasuredGenes")], id=c("Redundancy", "CorrelationThreshold", "NumberMeasuredGenes"))
View(results.simple)
View(results.simple)
dat <- getImputationData("~/Documents/tmp/evolutionary-gene-set-selection/Imputation/Data", "*TCGA.*0.6.imputation.results.txt")
getImputationData <- function(fDir, fPatt)
{
files <- list.files(path=fDir, pattern=fPatt, full.names=T, recursive=FALSE)
results <- lapply(files, function(x) {
tmp <- read.table(x)
fname <- tail(unlist(strsplit(x, split="/")), n=1)
metaData <- unlist(strsplit(fname, split="\\."))
if(length(metaData) == 8)
{
redundancy <- metaData[2]
nGenes <- metaData[3]
corrThresh <- metaData[5]
}
if(length(metaData) == 9)
{
redundancy <- metaData[3]
nGenes <- metaData[4]
corrThresh <- metaData[6]
}
tmp$Redundancy <- redundancy
tmp$NumberMeasuredGenes <- nGenes
tmp$CorrelationThreshold <- paste("0.",corrThresh,sep="")
return(tmp)
})
results.combined <- do.call(rbind, results)
results.simple <- melt(results.combined[,c("TCGA.Spearman", "Tothill.Spearman", "Yoshihara.Spearman", "Bonome.Spearman", "Bentink.Spearman", "Bentink.ReTransform.Spearman", "Goode.Spearman", "Redundancy", "CorrelationThreshold", "NumberMeasuredGenes")], id=c("Redundancy", "CorrelationThreshold", "NumberMeasuredGenes"))
return(results.simple)
}
#Get the 3,2,1-redundancy; 0.6 threshold imputation results
dat <- getImputationData("~/Documents/tmp/evolutionary-gene-set-selection/Imputation/Data", "*TCGA.*0.6.imputation.results.txt")
View(dat)
table(dat$variable)
ggplot(dat[dat$variable="TCGA.Spearman",], aes(factor(NumberMeasuredGenes, levels=c("10","15","20","25","30","35","40","45","50","100","150","200","250","300","350","400")), value, color=Redundancy)) +
stat_summary(fun.data="mean_cl_boot") + facet_grid(~ CorrelationThreshold) +
xlab("Number of Measured Genes") +
ylab("Correlation of Predicted and Actual Expression")
ggplot(dat[dat$variable=="TCGA.Spearman",], aes(factor(NumberMeasuredGenes, levels=c("10","15","20","25","30","35","40","45","50","100","150","200","250","300","350","400")), value, color=Redundancy)) +
stat_summary(fun.data="mean_cl_boot") + facet_grid(~ CorrelationThreshold) +
xlab("Number of Measured Genes") +
ylab("Correlation of Predicted and Actual Expression")
getImputationData <- function(fDir, fPatt)
{
files <- list.files(path=fDir, pattern=fPatt, full.names=T, recursive=FALSE)
results <- lapply(files, function(x) {
tmp <- read.table(x)
fname <- tail(unlist(strsplit(x, split="/")), n=1)
metaData <- unlist(strsplit(fname, split="\\."))
if(length(metaData) == 8)
{
redundancy <- metaData[2]
nGenes <- metaData[3]
corrThresh <- metaData[5]
candidate <- "None"
}
if(length(metaData) == 9)
{
redundancy <- metaData[3]
nGenes <- metaData[4]
corrThresh <- metaData[6]
candidate <- metaData[1]
}
tmp$Redundancy <- redundancy
tmp$NumberMeasuredGenes <- nGenes
tmp$CorrelationThreshold <- paste("0.",corrThresh,sep="")
tmp$Candidates <- candidate
return(tmp)
})
results.combined <- do.call(rbind, results)
results.simple <- melt(results.combined[,c("TCGA.Spearman", "Tothill.Spearman", "Yoshihara.Spearman", "Bonome.Spearman", "Bentink.Spearman", "Bentink.ReTransform.Spearman", "Goode.Spearman", "Redundancy", "CorrelationThreshold", "NumberMeasuredGenes", "Candidates")], id=c("Redundancy", "CorrelationThreshold", "NumberMeasuredGenes", "Candidates"))
return(results.simple)
}
#Get the 3,2,1-redundancy; 0.6 threshold imputation results
dat <- getImputationData("~/Documents/tmp/evolutionary-gene-set-selection/Imputation/Data", "*TCGA.*0.6.imputation.results.txt")
View(dat)
table(dat$Candidates)
ggplot(dat[dat$variable=="TCGA.Spearman" & dat$Candidates == "None",], aes(factor(NumberMeasuredGenes, levels=c("10","15","20","25","30","35","40","45","50","100","150","200","250","300","350","400")), value, color=Redundancy)) +
stat_summary(fun.data="mean_cl_boot") + facet_grid(~ CorrelationThreshold) +
xlab("Number of Measured Genes") +
ylab("Correlation of Predicted and Actual Expression")
dat <- getImputationData("~/Documents/tmp/evolutionary-gene-set-selection/Imputation/Data", "*.imputation.results.txt")
ggplot(dat[dat$variable=="TCGA.Spearman" & dat$Candidates == "None",], aes(factor(NumberMeasuredGenes, levels=c("10","15","20","25","30","35","40","45","50","100","150","200","250","300","350","400")), value, color=Redundancy)) +
stat_summary(fun.data="mean_cl_boot") + facet_grid(~ CorrelationThreshold) +
xlab("Number of Measured Genes") +
ylab("Correlation of Predicted and Actual Expression")
View(dat)
ggplot(dat[ dat$Candidates == "None",], aes(factor(NumberMeasuredGenes, levels=c("10","15","20","25","30","35","40","45","50","100","150","200","250","300","350","400")), value, color=Redundancy)) +
stat_summary(fun.data="mean_cl_boot") + facet_grid(variable ~ CorrelationThreshold) +
xlab("Number of Measured Genes") +
ylab("Correlation of Predicted and Actual Expression")
getImputationData <- function(fDir, fPatt)
{
files <- list.files(path=fDir, pattern=fPatt, full.names=T, recursive=FALSE)
results <- lapply(files, function(x) {
tmp <- read.table(x)
fname <- tail(unlist(strsplit(x, split="/")), n=1)
metaData <- unlist(strsplit(fname, split="\\."))
if(length(metaData) == 8)
{
redundancy <- metaData[2]
nGenes <- metaData[3]
corrThresh <- metaData[5]
candidate <- "None"
}
if(length(metaData) == 9)
{
redundancy <- metaData[3]
nGenes <- metaData[4]
corrThresh <- metaData[6]
candidate <- metaData[1]
}
tmp$Redundancy <- redundancy
tmp$NumberMeasuredGenes <- nGenes
tmp$CorrelationThreshold <- paste("0.",corrThresh,sep="")
tmp$Candidates <- candidate
return(tmp)
})
results.combined <- do.call(rbind, results)
results.simple <- melt(results.combined[,c("TCGA.Spearman", "Tothill.Spearman", "Yoshihara.Spearman", "Bonome.Spearman", "Bentink.Spearman", "Bentink.ReTransform.Spearman", "Goode.Spearman", "Redundancy", "CorrelationThreshold", "NumberMeasuredGenes", "Candidates")], id=c("Redundancy", "CorrelationThreshold", "NumberMeasuredGenes", "Candidates"))
return(results.simple)
}
#Get the  imputation results
dat <- getImputationData("~/Documents/tmp/evolutionary-gene-set-selection/Imputation/Data", "*.imputation.results.txt")
table(dat$variable)
table(dat$Candidates)
#Plot the no candidates results
ggplot(dat[ dat$Candidates == "None",], aes(factor(NumberMeasuredGenes, levels=c("10","15","20","25","30","35","40","45","50","100","150","200","250","300","350","400")), value, color=Redundancy)) +
stat_summary(fun.data="mean_cl_boot") + facet_grid(variable ~ CorrelationThreshold) +
xlab("Number of Measured Genes") +
ylab("Correlation of Predicted and Actual Expression")
ggsave("~/Documents/tmp/evolutionary-gene-set-selection/Imputation/Figures/No.Candidates.imputation.results.png", height=11, width=11)
#Plot the TCGA candidates results
ggplot(dat[ dat$Candidates == "TCGA",], aes(factor(NumberMeasuredGenes, levels=c("10","15","20","25","30","35","40","45","50","100","150","200","250","300","350","400")), value, color=Redundancy)) +
stat_summary(fun.data="mean_cl_boot") + facet_grid(variable ~ CorrelationThreshold) +
xlab("Number of Measured Genes") +
ylab("Correlation of Predicted and Actual Expression")
ggsave("~/Documents/tmp/evolutionary-gene-set-selection/Imputation/Figures/TCGA.Candidates.imputation.results.png", height=11, width=11)
#Plot the Yoshihara candidates results
ggplot(dat[ dat$Candidates == "Yoshihara",], aes(factor(NumberMeasuredGenes, levels=c("10","15","20","25","30","35","40","45","50","100","150","200","250","300","350","400")), value, color=Redundancy)) +
stat_summary(fun.data="mean_cl_boot") + facet_grid(variable ~ CorrelationThreshold) +
xlab("Number of Measured Genes") +
ylab("Correlation of Predicted and Actual Expression")
ggsave("~/Documents/tmp/evolutionary-gene-set-selection/Imputation/Figures/Yoshihara.Candidates.imputation.results.png", height=11, width=11)
source('~/Documents/tmp/evolutionary-gene-set-selection/Imputation/Scripts/Plot_Figures.R')
?apply
tmp <- list()
tmp["Cat1"] <- rep(1,10)
tmp[["Cat1"]] <- rep(1,10)
tmp[["Cat2"]] <- rep(2,10)
tmp[["Cat3"]] <- rep(3,10)
unlist(tmp)
tmp.df <- do.call(rbind,tmp)
View(tmp.df)
tmp[["Cat1"]] <- 1
tmp[["Cat2"]] <- 2
tmp[["Cat3"]] <- 3
do.call(rbind, tmp)
do.call(cbind, tmp)
name1 <- "Cat1"
name2 <- "Cat2"
name3 <- "Cat3"
tmp <- list()
tmp[[name1]] <- 1
tmp[[name2]] <- 2
tmp[[name3]] <- 3
do.call(cbind, tmp)
rbind(do.call(cbind, tmp), do.call(cbind, tmp))
do.call(cbind, tmp)
type(do.call(cbind, tmp))
what <- type(do.call(cbind, tmp))
what <- do.call(cbind, tmp)
cbind(10,20,do.call(cbind, tmp))
what <- cbind(10,20,do.call(cbind, tmp))
colnames(what)[1:2] <- c("Tset1", "Tset2")
what
load("/home/jrudd/Dropbox/DCEL/mayo/PostComBatSDMissfilterAgilent3BatchesExprDartmouth36875p384sWithNA.RData")
View(jen.comb.mtx2)
tmp <- read.csv("~/Dropbox/DCEL/mayo/agilent_HGS_covars_forDoherty_25APR14.csv")
View(tmp)
table(tmp$histology, tmp$grade)
table(tmp$grade)
?table
setwd("~/Documents/tmp2/evolutionary-gene-set-selection/Scripts")
tcga.samples <- read.csv("../Data/SampleFilter/TCGACompleteFull_samplesRemoved.csv")
View(tcga.samples)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#LIBRARIES
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#load required libraries
library(ggplot2)
library(gplots)
library(ff)
library(doMC)
library(multicore)
library(fastcluster)
library(hexbin)
library(curatedOvarianData)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#FUNCTIONS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#The following function accelerates the creation of large correlation
#matrices. Function taken from:
#https://gist.github.com/bobthecat/5024079
#http://www.r-bloggers.com/large-correlation-in-parallel/
bigcorPar <- function(x, nblocks = 10, verbose = TRUE, ncore="all", ...){
library(ff, quietly = TRUE)
require(doMC)
if(ncore=="all"){
ncore = multicore:::detectCores()
registerDoMC(cores = ncore)
} else{
registerDoMC(cores = ncore)
}
cat("Using ", ncore, " cores\n")
NCOL <- ncol(x)
## test if ncol(x) %% nblocks gives remainder 0
if (NCOL %% nblocks != 0){stop("Choose different 'nblocks' so that ncol(x) %% nblocks = 0!")}
## preallocate square matrix of dimension
## ncol(x) in 'ff' single format
corMAT <- ff(vmode = "single", dim = c(NCOL, NCOL))
cat("Allocated Memory for the Resulting Matrix\n")
## split column numbers into 'nblocks' groups
SPLIT <- split(1:NCOL, rep(1:nblocks, each = NCOL/nblocks))
cat("Split the Data into Blocks\n")
## create all unique combinations of blocks
COMBS <- expand.grid(1:length(SPLIT), 1:length(SPLIT))
COMBS <- t(apply(COMBS, 1, sort))
COMBS <- unique(COMBS)
cat("Calculate Combinations of Blocks")
## iterate through each block combination, calculate correlation matrix
## between blocks and store them in the preallocated matrix on both
## symmetric sides of the diagonal
results <- foreach(i = 1:nrow(COMBS)) %dopar% {
COMB <- COMBS[i, ]
G1 <- SPLIT[[COMB[1]]]
G2 <- SPLIT[[COMB[2]]]
if (verbose) cat("Block", COMB[1], "with Block", COMB[2], "\n")
flush.console()
COR <- cor(x[, G1], x[, G2], use="complete.obs", ...)
corMAT[G1, G2] <- COR
corMAT[G2, G1] <- t(COR)
COR <- NULL
}
gc()
return(corMAT)
}
#Get the number of cpu blocks to use when creating the correlation matrix
#The total number of genes should be evenly divided by the number of blocks
getNumBlocks <- function(nGenes)
{
rs <- 1
for(i in 2:20)
{
if( nGenes %% i == 0)
{
rs <- i
}
}
return(rs)
}
#calculate a correlation for each column to each other column
getCorrelationMatrix <- function(data)
{
nb <- getNumBlocks(ncol(data))
data.correlation <- bigcorPar(data, nblocks=nb)
correlation.matrix <- as.matrix(data.correlation[,])
colnames(correlation.matrix) <- colnames(data)
rownames(correlation.matrix) <- colnames(data)
return(correlation.matrix)
}
#convert a continuous correlation matrix into a 0/1 representation based on greater than/equal to a threshold
corrMat2BinMat <- function(mat, thresh)
{
result <- (abs(mat) >= thresh) * 1
return(result)
}
MAD <- function(x)
{
thisMedian <- median(x, na.rm=TRUE)
result <- median(abs(x - thisMedian), na.rm=TRUE)
return(result)
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#ANALYSIS OF THE GENE EXPRESSION DATA
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#===================================
#CREATE BINARY MATRICES OF TCGA DATA
#===================================
#get the good sample IDs
tcga.samples <- read.csv("../Data/SampleFilter/TCGACompleteFull_samplesRemoved.csv")
data(TCGA_eset)
TCGA <- exprs(TCGA_eset)
TCGA <- TCGA[,tcga.samples]
rm(TCGA_eset)
gc()
TCGA <- TCGA[,tcga.samples$x]
View(TCGA)
tcga.samples$x
as.character(tcga.samples$x)
TCGA <- TCGA[,as.character(tcga.samples$x)]
TCGA <- exprs(TCGA_eset)
data(TCGA_eset)
TCGA <- exprs(TCGA_eset)
TCGA.clean <- TCGA[,as.character(tcga.samples$x)]
TCGA <- TCGA[,as.character(tcga.samples$x)]
setwd("~/Documents/tmp2/evolutionary-gene-set-selection/Imputation/Scripts")
View(jen.comb.mtx2)
write.csv(colnames(jen.comb.mtx2),"~/mayo.ids.csv")
tmp <- read.csv("~/Dropbox/DCEL/mayo/agilent_HGS_covars_forDoherty_25APR14.csv")
View(tmp)
sum(tmp$histology == 1)
sum(tmp$grade == 1 | tmp$histology == 4 | (tmp$histology == 2 & tmp$grade < 2))
sum(tmp$grade == 1 | tmp$histology == 4 | (tmp$histology == 2 & tmp$grade < 2) | (tmp$histology == 3 & tmp$grade == 2))
!(tmp$grade == 1 | tmp$histology == 4 | (tmp$histology == 2 & tmp$grade < 2) | (tmp$histology == 3 & tmp$grade == 2))
rownames(!(tmp$grade == 1 | tmp$histology == 4 | (tmp$histology == 2 & tmp$grade < 2) | (tmp$histology == 3 & tmp$grade == 2)))
rownames(tmp[!(tmp$grade == 1 | tmp$histology == 4 | (tmp$histology == 2 & tmp$grade < 2) | (tmp$histology == 3 & tmp$grade == 2)),])
tmp$ID[!(tmp$grade == 1 | tmp$histology == 4 | (tmp$histology == 2 & tmp$grade < 2) | (tmp$histology == 3 & tmp$grade == 2))]
write.csv(tmp$ID[!(tmp$grade == 1 | tmp$histology == 4 | (tmp$histology == 2 & tmp$grade < 2) | (tmp$histology == 3 & tmp$grade == 2))], "../../Data/SampleFilter/MayoCompleteFull_samplesRemoved.csv")
?write.csv
write.csv(tmp$ID[!(tmp$grade == 1 | tmp$histology == 4 | (tmp$histology == 2 & tmp$grade < 2) | (tmp$histology == 3 & tmp$grade == 2))], "../../Data/SampleFilter/MayoCompleteFull_samplesRemoved.csv", rownames=F)
write.csv(tmp$ID[!(tmp$grade == 1 | tmp$histology == 4 | (tmp$histology == 2 & tmp$grade < 2) | (tmp$histology == 3 & tmp$grade == 2))], "../../Data/SampleFilter/MayoCompleteFull_samplesRemoved.csv", row.names=F)
Goode <- read.table("Data/jen.comb.mtx2_exprs_Normalizer.txt", sep="\t")
Goode <- Goode[,-1]
mayo.samples <- read.csv("../../Data/SampleFilter/MayoCompleteFull_samplesRemoved.csv")
Goode <- Goode[,as.character(mayo.samples$x)]
cat("Loaded Goode Data \n")
Goode <- read.table("../../Data/jen.comb.mtx2_exprs_Normalizer.txt", sep="\t")
Goode <- read.table("../../Data/jen.comb.mtx2_exprs_Normalizer.txt", sep="\t")
View(Goode)
Goode <- Goode[,-1]
mayo.samples <- read.csv("../../Data/SampleFilter/MayoCompleteFull_samplesRemoved.csv")
Goode <- Goode[,as.character(mayo.samples$x)]
